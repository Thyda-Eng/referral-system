MD = {
}
MD.getMapOptions = function(){
    if(typeof MD.mapOptions == "undefined"){
        MD.mapOptions =  {
          zoom: 6,
          center: new google.maps.LatLng(11.6522364041154, 104.91943359375),
          mapTypeId: google.maps.MapTypeId.ROADMAP,
          panControl :true,
          rotateControl : true,
          scaleControl :true,
          zoomControl : true,
          streetViewControl: true
        };
    }
    return MD.mapOptions;
}
MD.setMapOptions = function(myOptions){
    MD.mapOptions = myOptions
}

MD.createLatLng = function(lat,lng){
    return new google.maps.LatLng(lat, lng)
}

MD.getMap = function(){
    return MD.map;
}
MD.event = function(){
    return google.maps.event;
}

MD.createMap = function(canvas, myOptions){
  if(typeof myOptions == "undefined"){
      myOptions = MD.getMapOptions();
  }
  MD.map =  new google.maps.Map(jQuery(canvas).get(0),myOptions);
  return MD.map;
}

MD.getInfoWindow = function(){
    if(typeof MD.infoWindow =="undefined"){
        MD.infoWindow = new google.maps.InfoWindow({
            "content": ""
        });
    }
    return MD.infoWindow;
}

MD.createMarker = function(options){
    if(typeof MD.markers == "undefined"){
        MD.markers = [];
    }

    var markerOption = options;
    markerOption.position = MD.createLatLng(options["lat"],options["lng"])

    var marker = new google.maps.Marker(markerOption);

    marker.setMap(MD.getMap());
    MD.markers.push(marker);
    return marker;
}
MD.createMarkeWithLabel = function(options){
    var markerOption = options;
    markerOption.position = MD.createLatLng(options["lat"],options["lng"])
    var marker = new MarkerWithLabel(options);
    marker.setMap(MD.getMap());
    MD.markers.push(marker);
    return marker;
}

MD.createStyledMarker = function(options){
    if(typeof MD.markers == "undefined"){
        MD.markers = [];
    }

    var markerOption = options;
    markerOption.position = MD.createLatLng(options["lat"],options["lng"])
    var rand = parseInt(Math.random()*4);
    var colors = ["00ffee","0ddffa","88dd00","677789"]
    color = "00EE00"  //colors[rand];
    markerOption.styleIcon = new StyledIcon(StyledIconTypes.BUBBLE,{color:color,text: options["title"]})

    var marker = new StyledMarker(markerOption);

    marker.setMap(MD.getMap());
    MD.markers.push(marker);
    return marker;
}


MD.createEvent = function(objReceiver, eventType, handler){
    google.maps.event.addListener(objReceiver, eventType, handler);
}

MD.getMarkers = function(){
    if(typeof MD.markers == "undefined"){
        MD.markers = [];
    }
    return MD.markers;
}
MD.removeMarkers = function(){
    while(MD.getMarkers().length){
        MD.markers[0].setMap(null);
        MD.markers.splice(0, 1)
    }
}


MD.boundBox = function(){
   var bounds = new google.maps.LatLngBounds();

   for(var i = 0; i< MD.getMarkers().length; i ++){
       bounds.extend(MD.getMarkers()[i].getPosition())
   }
   MD.map.fitBounds(bounds);
}

MD.date = {}

MD.date.dateFormat = function(date,year,month,day){
    var result = [];

    if(year)
       result.push(date.getFullYear());

    if(month){
        month = date.getMonth() +1
        month = ( month >= 10) ? month : "0"+ month;
        result.push(month);
    }

    if(day){
        result.push((date.getDate() >= 10 ) ? date.getDate() : "0"+date.getDate());
    }
    return result.join("-");
}

MD.date.getDateAfter = function(nday){
    var date = new Date();
    var timestamp = date.valueOf();
    var milli_day = nday*24*60*60*1000;
    var date_after = new Date(timestamp-milli_day);
    return MD.date.dateFormat(date_after,true,true,true);
}

MD.date.getMonthAfter = function(nmonth){
    var date = new Date();
    var timestamp = date.valueOf();
    var milli_day = nmonth*24*60*60*1000*30;
    var date_after = new Date(timestamp-milli_day);
    return MD.date.dateFormat(date_after,true,true);
}

MD.date.getYearAfter = function(nyear){
    var date = new Date();
    var timestamp = date.valueOf();
    var milli_day = nyear*24*60*60*1000*30*12;
    var date_after = new Date(timestamp-milli_day);
    return MD.date.dateFormat(date_after,true);
}

MD.date.toCalender = function(){
   var ntime = MD.visualize.ntime;
   var type = MD.visualize.type ;
   if(type == "custom"){ //update unless it is custom option
       return ;
   }

   types = {
       "day": 24*60*60*1000,
       "month": 30*24*60*60*1000,
       "year" : 12*30*24*60*60*1000
   }

   coe = types["day"];
   if(type == "year" ||type == "month")
       coe = types[type];

   var date = new Date();
   var timestamp = date.valueOf();

   var selected = timestamp- ntime* coe;

   var to = new Date(selected)
   var stamp = ""
   if(type=="day"){
       stamp = selected-types["day"];
   }
   else if(type=="week"){
       stamp = selected-types["day"]*7;
   }
   else if(type=="month"){
       stamp = selected-types["day"]*30
   }
   else if(type=="year"){
       stamp = selected-types["day"]*365
   }
   var from = new Date(stamp);
   var fromDateStr = MD.date.dateFormat(from,true,true,true);
   var toDateStr = MD.date.dateFormat(to, true, true, true);
   $("#from").val(fromDateStr);
   $("#to").val(toDateStr);

   //console.log("From: " + fromDateStr);
   //console.log("To : " + toDateStr);
   var result = [fromDateStr,toDateStr];
   return result;
}


MD.visualize = {}
MD.visualize.slider = {}
MD.visualize.ntime = 0;
MD.visualize.type = "day" ;

MD.visualize.setNtime =function(ntime){
    MD.visualize.ntime = ntime;
}

MD.visualize.setType = function(type){
    MD.visualize.type = type;
    if(type=="year")
       MD.visualize.max = 5;
    else if(type == "month" )
       MD.visualize.max = 12;
    else
       MD.visualize.max = 60
}

MD.visualize.create = function(type,value){
    type = (!type)? "day":type;
    MD.visualize.setType(type);
    value = value ? value : MD.visualize.max;

    MD.visualizor = $("#slider").slider({
                                          min: 0,
                                          max: MD.visualize.max,
                                          value: value,
                                          animate: true,
                                          slide: function(event, ui){
                                            var value = ui.value;
                                            var ntime = MD.visualize.max-value;
                                            MD.visualize.setNtime(ntime);
                                            MD.visualize.updateSliderDrag();
                                            MD.visualize.moveStutusToSlide();

                                          },
                                          start: function(){
                                             $("#slide_status").fadeIn(1000,function(){

                                             });
                                          },
                                          stop : function(){

                                             $("#slide_status").fadeOut(1000,function(){
                                             });
                                          }

                                        });
}

MD.centerTo = function(lat,lng){
    var center = MD.createLatLng(lat,lng);
    MD.map.setCenter(center);
    //MD.map.setZoom(6);
}

MD.visualize.setValue = function(value){
   MD.visualizor.slider("value",value);
}

MD.visualize.updateType = function(type){
   MD.visualize.setType(type);
   if(type == "custom"){
     MD.visualizor.slider("disable");
     $("#customOption").fadeIn(600);
     return;
   }
   $("#customOption").fadeOut(600);
   MD.visualizor.slider("enable");


   MD.visualizor.slider("option",{
       max: MD.visualize.max,
       value: MD.visualize.max
   })
   MD.visualize.updateSlider();
}

MD.visualize.updateSliderDrag = function(){

   ntime = MD.visualize.ntime;
   ntime = (typeof ntime == "undefined")?0:ntime;

   if(MD.visualize.type == "day" || MD.visualize.type == "week")
   {
      MD.visualize.showLabelSelected("#slide_status", MD.date.getDateAfter(ntime)  );
      MD.visualize.showLabelSelected("#slide_selected", MD.date.getDateAfter(ntime)  );
   }
   else if(MD.visualize.type == "week"){
      MD.visualize.showLabelSelected("#slide_status", MD.date.getDateAfter(ntime)  );
      MD.visualize.showLabelSelected("#slide_selected", MD.date.getDateAfter(ntime)  );
   }
   else if(MD.visualize.type == "month")
   {
      MD.visualize.showLabelSelected("#slide_status", MD.date.getMonthAfter(ntime)  );
      MD.visualize.showLabelSelected("#slide_selected", MD.date.getMonthAfter(ntime)  );
   }
   else if(MD.visualize.type == "year"){
      MD.visualize.showLabelSelected("#slide_status", MD.date.getYearAfter(ntime)  );
      MD.visualize.showLabelSelected("#slide_selected", MD.date.getYearAfter(ntime)  );
   }
   MD.date.toCalender()
}

MD.visualize.updateSlider = function(ntime){
   ntime = (typeof ntime == "undefined")?0:ntime;

   if(MD.visualize.type == "day" || MD.visualize.type == "week")
   {
      MD.visualize.showLabel("#slide_min", MD.date.getDateAfter(MD.visualize.max) );
      MD.visualize.showLabel("#slide_selected", MD.date.getDateAfter(0) );
      MD.visualize.showLabel("#slide_max", MD.date.getDateAfter(0) );
   }
   else if(MD.visualize.type == "month")
   {
      MD.visualize.showLabel("#slide_min", MD.date.getMonthAfter(MD.visualize.max) );
      MD.visualize.showLabel("#slide_selected", MD.date.getMonthAfter(0) );
      MD.visualize.showLabel("#slide_max", MD.date.getMonthAfter(0) );
   }
   else if(MD.visualize.type == "year"){
      MD.visualize.showLabel("#slide_min" , MD.date.getYearAfter(MD.visualize.max) );
      MD.visualize.showLabel("#slide_selected" , MD.date.getYearAfter(0) );
      MD.visualize.showLabel("#slide_max" , MD.date.getYearAfter(0) );
   }

}

MD.visualize.showLabel =function(label,value){
    $(label).html("<span>"+value+"</span>")
}
MD.visualize.showLabelSelected =function(label,value){
    $(label).html("<span>"+value+"</span>")
}
MD.visualize.moveStutusToSlide = function(){
    var left = $("#slider>a").offset().left ;
    var top = $("#slider>a").offset().top + 20 ;

    $("#slide_status").css("left", left + "px");
    $("#slide_status").css("top", top+ "px");
}


MD.bcUI = {}
MD.bcUI.create = function(container){
    MD.bcUI.container = $(container);
}
MD.bcUI.types = ["country","province", "od", "healthcenter", "village"];
MD.bcUI.findLevel = function(type){
   type = type.toLowerCase();
   types =  MD.bcUI.types;
   for(var i=0; i<types.length; i++){
       if(types[i] == type)
           return i;
   }
   return i ;
}

MD.bcUI.setAsObj =function(obj){
    MD.bcUI.set(obj["id"], obj["name"], obj["type"],obj["parent_id"])
}


MD.bcUI.set = function(id,name,type){
    if(typeof MD.bcUI.store == "undefined"){
        MD.bcUI.store = [
            {}, //country
            {}, // province
            {}, //od
            {}, //healthcenter
            {}  //village
        ]
    }
    position = MD.bcUI.findLevel(type);
    if(position == 0)
       id = 0

    MD.bcUI.store.splice(position, 1 ,{id: id, name: name,type: type} );
}

MD.bcUI.cur = function(type){
    MD.bcUI.cur = type
    MD.bcUI.show(type);
}

MD.bcUI.show = function(type){
   var position = MD.bcUI.findLevel(type);
   var lElement = []
   for(var i = 0; i< MD.bcUI.store.length ;i++ ){
       if(i<= position){
          var link = MD.bcUI.generateElement(MD.bcUI.store[i],i==position);
          lElement.push(link);
       }
   }
   MD.bcUI.container.html(lElement.join("")); //&rarr;
}
MD.bcUI.generateElement = function(element,active){
    var act = " "
    if(active){
        act = " bcActive"
    }
    if(element.type){
        //<span>" +element.type + "</span>
        var str = "<span class='bcWrapper  "+ act + "' ><a href='' class='bcElement" + act + "' rel='"+ element["id"] + "' > " + element["name"] + "</a></span>" ;
    }
    return str;
}






